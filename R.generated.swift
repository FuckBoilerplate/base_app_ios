//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.fuckboilerplate.base-app-ios") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DashboardTableViewCellIdentifier`.
    static let dashboardTableViewCellIdentifier: Rswift.ReuseIdentifier<DashboardTableViewCell> = Rswift.ReuseIdentifier(identifier: "DashboardTableViewCellIdentifier")
    /// Reuse identifier `UsersTableViewCellIdentifier`.
    static let usersTableViewCellIdentifier: Rswift.ReuseIdentifier<UsersTableViewCell> = Rswift.ReuseIdentifier(identifier: "UsersTableViewCellIdentifier")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Launch`.
    static let launch = _R.storyboard.launch()
    /// Storyboard `User`.
    static let user = _R.storyboard.user()
    
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    
    /// `UIStoryboard(name: "Launch", bundle: ...)`
    static func launch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launch)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "User", bundle: ...)`
    static func user(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.user)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try user.validate()
      try dashboard.validate()
      try launch.validate()
    }
    
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardViewController
      
      let bundle = R.hostingBundle
      let dashboardViewController = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardViewController")
      let name = "Dashboard"
      
      func dashboardViewController(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.dashboard().dashboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Dashboard' as 'DashboardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = R.hostingBundle
      let launchViewController = StoryboardViewControllerResource<LaunchViewController>(identifier: "LaunchViewController")
      let name = "Launch"
      
      func launchViewController(_: Void = ()) -> LaunchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.launch().launchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchViewController' could not be loaded from storyboard 'Launch' as 'LaunchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct user: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UsersViewController
      
      let bundle = R.hostingBundle
      let name = "User"
      let searchUserViewController = StoryboardViewControllerResource<SearchUserViewController>(identifier: "SearchUserViewController")
      let userViewController = StoryboardViewControllerResource<UserViewController>(identifier: "UserViewController")
      let usersViewController = StoryboardViewControllerResource<UsersViewController>(identifier: "UsersViewController")
      
      func searchUserViewController(_: Void = ()) -> SearchUserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchUserViewController)
      }
      
      func userViewController(_: Void = ()) -> UserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userViewController)
      }
      
      func usersViewController(_: Void = ()) -> UsersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: usersViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.user().userViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userViewController' could not be loaded from storyboard 'User' as 'UserViewController'.") }
        if _R.storyboard.user().searchUserViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchUserViewController' could not be loaded from storyboard 'User' as 'SearchUserViewController'.") }
        if _R.storyboard.user().usersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'usersViewController' could not be loaded from storyboard 'User' as 'UsersViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}