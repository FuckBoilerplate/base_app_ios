// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  struct file {
    
  }
  
  struct font {
    
  }
  
  struct image {
    
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
  }
  
  struct nib {
    
  }
  
  struct reuseIdentifier {
    static let dashboardTableViewCellIdentifier: ReuseIdentifier<DashboardTableViewCell> = ReuseIdentifier(identifier: "DashboardTableViewCellIdentifier")
    static let usersTableViewCellIdentifier: ReuseIdentifier<UsersTableViewCell> = ReuseIdentifier(identifier: "UsersTableViewCellIdentifier")
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    static let dashboard = _R.storyboard.dashboard()
    static let launch = _R.storyboard.launch()
    static let launchScreen = _R.storyboard.launchScreen()
    static let user = _R.storyboard.user()
    
    static func dashboard(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.dashboard)
    }
    
    static func launch(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launch)
    }
    
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    static func user(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.user)
    }
  }
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "com.fuckboilerplate.base-app-ios")
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try dashboard.validate()
      try launch.validate()
      try user.validate()
    }
    
    struct dashboard: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardViewController
      
      let bundle = _R.hostingBundle
      let name = "Dashboard"
      
      func dashboardViewController() -> DashboardViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("DashboardViewController") as? DashboardViewController
      }
      
      static func validate() throws {
        if _R.storyboard.dashboard().dashboardViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Dashboard' as 'DashboardViewController'.") }
      }
    }
    
    struct launch: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = _R.hostingBundle
      let name = "Launch"
      
      func launchViewController() -> LaunchViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("LaunchViewController") as? LaunchViewController
      }
      
      static func validate() throws {
        if _R.storyboard.launch().launchViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'launchViewController' could not be loaded from storyboard 'Launch' as 'LaunchViewController'.") }
      }
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
    }
    
    struct user: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UsersViewController
      
      let bundle = _R.hostingBundle
      let name = "User"
      
      func searchUserViewController() -> SearchUserViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("SearchUserViewController") as? SearchUserViewController
      }
      
      func userViewController() -> UserViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("UserViewController") as? UserViewController
      }
      
      func usersViewController() -> UsersViewController? {
        return UIStoryboard(resource: self).instantiateViewControllerWithIdentifier("UsersViewController") as? UsersViewController
      }
      
      static func validate() throws {
        if _R.storyboard.user().usersViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'usersViewController' could not be loaded from storyboard 'User' as 'UsersViewController'.") }
        if _R.storyboard.user().searchUserViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'searchUserViewController' could not be loaded from storyboard 'User' as 'SearchUserViewController'.") }
        if _R.storyboard.user().userViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'userViewController' could not be loaded from storyboard 'User' as 'UserViewController'.") }
      }
    }
  }
}