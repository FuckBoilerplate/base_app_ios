// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if structuredStrings %}
import Foundation

// swiftlint:disable file_length
// swiftlint:disable type_body_length
// swiftlint:disable nesting

enum {{enumName}} {
  {# ROOT LEVEL #}
  {% for string in structuredStrings.strings %}
  /// {{string.translation}}
  case {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
  {% endfor %}
  {% if structuredStrings.subenums %}
  {% for subenum1 in structuredStrings.subenums %}

  case {{subenum1.name|swiftIdentifier|titlecase|snakeToCamelCase}}({{subenum1.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}})
  enum {{subenum1.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}} {
    {# LEVEL 1 #}
    {% if subenum1.strings %}
    {% for string in subenum1.strings %}
    /// {{string.translation}}
    case {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
    {% endfor %}
    {% endif %}
    {% if subenum1.subenums %}
    {% for subenum2 in subenum1.subenums %}

    case {{subenum2.name|swiftIdentifier|titlecase|snakeToCamelCase}}({{subenum2.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}})
    enum {{subenum2.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}} {
      {# LEVEL 2 #}
      {% if subenum2.strings %}
      {% for string in subenum2.strings %}
      /// {{string.translation}}
      case {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
      {% endfor %}
      {% endif %}
      {% if subenum2.subenums %}
      {% for subenum3 in subenum2.subenums %}

      case {{subenum3.name|swiftIdentifier|titlecase|snakeToCamelCase}}({{subenum3.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}})
      enum {{subenum3.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}} {
        {# LEVEL 3 #}
        {% if subenum3.strings %}
        {% for string in subenum3.strings %}
        /// {{string.translation}}
        case {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
        {% endfor %}
        {% endif %}
        {% if subenum3.subenums %}
        {% for subenum4 in subenum3.subenums %}

        case {{subenum4.name|swiftIdentifier|titlecase|snakeToCamelCase}}({{subenum4.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}})
        enum {{subenum4.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}} {
          {# LEVEL 4 #}
          {% if subenum4.strings %}
          {% for string in subenum4.strings %}
          /// {{string.translation}}
          case {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
          {% endfor %}
          {% endif %}
          {% if subenum4.subenums %}
          {% for subenum5 in subenum4.subenums %}

          case {{subenum5.name|swiftIdentifier|titlecase|snakeToCamelCase}}({{subenum5.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}})
          enum {{subenum5.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}} {
            {# LEVEL 5 #}
            {% if subenum5.strings %}
            {% for string in subenum5.strings %}
            /// {{string.translation}}
            case {{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
            {% endfor %}
            {% endif %}
            {% if subenum5.subenums %}
            {% for subenum6 in subenum5.subenums %}

            case {{subenum6.name|swiftIdentifier|titlecase|snakeToCamelCase}}({{subenum6.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}})
            enum {{subenum6.name|swiftIdentifier|titlecase|snakeToCamelCase}}{{enumName}} {
              // maximum level reached, please make sure not to use keys with so many levels
            }
            {% endfor %}
            {% endif %}
          }
          {% endfor %}
          {% endif %}
        }
        {% endfor %}
        {% endif %}
      }
      {% endfor %}
      {% endif %}
    }
    {% endfor %}
    {% endif %}
  }
  {% endfor %}
  {% endif %}
}

extension {{enumName}}: CustomStringConvertible {
  var description: String { return self.string }

  var string: String {
    {# ROOT LEVEL #}
    switch self {
      {% for string in structuredStrings.strings %}
      {% if string.params %}
      case .{{string.key|swiftIdentifier|titlecase|snakeToCamelCase}}({{string.params.declarations|join}}):
        return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
      {% else %}
      case .{{string.key|swiftIdentifier|titlecase|snakeToCamelCase}}:
        return {{enumName}}.tr("{{string.key}}")
      {% endif %}
      {% endfor %}
      {% if structuredStrings.subenums %}
      {% for subenum1 in structuredStrings.subenums %}
      case .{{subenum1.name|swiftIdentifier|titlecase|snakeToCamelCase}}(let level1key):

        {# LEVEL 1 #}
        switch level1key {
          {% if subenum1.strings %}
          {% for string in subenum1.strings %}
          {% if string.params %}
          case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}({{string.params.declarations|join}}):
            return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
          {% else %}
          case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}:
            return {{enumName}}.tr("{{string.key}}")
          {% endif %}
          {% endfor %}
          {% endif %}
          {% if subenum1.subenums %}
          {% for subenum2 in subenum1.subenums %}
          case .{{subenum2.name|swiftIdentifier|titlecase|snakeToCamelCase}}(let level2key):

            {# LEVEL 2 #}
            switch level2key {
              {% if subenum2.strings %}
              {% for string in subenum2.strings %}
              {% if string.params %}
              case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}({{string.params.declarations|join}}):
                return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
              {% else %}
              case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}:
                return {{enumName}}.tr("{{string.key}}")
              {% endif %}
              {% endfor %}
              {% endif %}
              {% if subenum2.subenums %}
              {% for subenum3 in subenum2.subenums %}
              case .{{subenum3.name|swiftIdentifier|titlecase|snakeToCamelCase}}(let level3key):

                {# LEVEL 3 #}
                switch level3key {
                  {% if subenum3.strings %}
                  {% for string in subenum3.strings %}
                  {% if string.params %}
                  case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}({{string.params.declarations|join}}):
                    return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
                  {% else %}
                  case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}:
                    return {{enumName}}.tr("{{string.key}}")
                  {% endif %}
                  {% endfor %}
                  {% endif %}
                  {% if subenum3.subenums %}
                  {% for subenum4 in subenum3.subenums %}
                  case .{{subenum4.name|swiftIdentifier|titlecase|snakeToCamelCase}}(let level4key):

                    {# LEVEL 4 #}
                    switch level4key {
                      {% if subenum4.strings %}
                      {% for string in subenum4.strings %}
                      {% if string.params %}
                      case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}({{string.params.declarations|join}}):
                        return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
                      {% else %}
                      case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}:
                        return {{enumName}}.tr("{{string.key}}")
                      {% endif %}
                      {% endfor %}
                      {% endif %}
                      {% if subenum4.subenums %}
                      {% for subenum5 in subenum4.subenums %}
                      case .{{subenum5.name|swiftIdentifier|titlecase|snakeToCamelCase}}(let level5key):

                        {# LEVEL 5 #}
                        switch level5key {
                          {% if subenum5.strings %}
                          {% for string in subenum5.strings %}
                          {% if string.params %}
                          case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}({{string.params.declarations|join}}):
                            return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
                          {% else %}
                          case .{{string.keytail|swiftIdentifier|titlecase|snakeToCamelCase}}:
                            return {{enumName}}.tr("{{string.key}}")
                          {% endif %}
                          {% endfor %}
                          {% endif %}
                          {% if subenum5.subenums %}
                          {% for subenum6 in subenum5.subenums %}
                          case .{{subenum6.name|swiftIdentifier|titlecase|snakeToCamelCase}}(let level6key):
                            // maximum level reached, please make sure not to use keys with so many levels
                          {% endfor %}
                          {% endif %}
                        }
                      {% endfor %}
                      {% endif %}
                    }
                  {% endfor %}
                  {% endif %}
                }
              {% endfor %}
              {% endif %}
            }
          {% endfor %}
          {% endif %}
        }
      {% endfor %}
      {% endif %}
    }
  }

  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let format = NSLocalizedString(key, comment: "")
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

// swiftlint:enable type_body_length
// swiftlint:enable nesting

func tr(key: {{enumName}}) -> String {
  return key.string
}
{% else %}
// No string found
{% endif %}
